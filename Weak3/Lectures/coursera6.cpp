//Предположим, нам нужно в нашей программе работать с видеолекциями, 
//например, с названием видеолекции и ее продолжительностью.
//Какие должны быть параметры у этой функции? 
//Понятно, что это должны быть, соответственно, 
//название видеолекции в виде строки и ее продолжительность в виде целого числа.

//Допустим, теперь нам нужно выводить информацию о наборе видеолекций. 
//Напишем функцию PrintCourse.

//Предположим, что теперь у нас появилась необходимость хранить и 
//обрабатывать еще одну характеристику видеолекции, 
//например, имя автора, в виде еще одной строки. 
//Как нам нужно модифицировать код? 
//Нам нужно в функцию PrintLecture добавить еще один параметр, 
//еще одну строчку принять на вход - имя автора
//Добавляется третий вектор в параметр функции PrintCourse, 
//и соответственно нужно поправить вызов функции PrintLecture

//Основная проблема в том, что мы неявно и неправильно выражаем свои намерения. 
//Мы хотим хранить видеолекцию, но храним почему-то отдельно название, 
//отдельно продолжительность, отдельно имя автора.
//Из этой проблемы вытекает следующая проблема, 
//что когда у нас меняется набор характеристик, 
//когда у нас добавляется новая характеристика или удаляется какая-то 
//характеристика видеолекций, мы должны поменять очень много заголовков функций и, 
//соответственно, посмотреть в реализации этих функций: 
//не нужно ли там что-то поменять, вызов каких-то функций и так далее.

struct Lecture      //составной тип
{                   //из 3 полей
    string title;
    int duration;
    string author;
};

void PrintLecture(const Lecture& lecture){
    cout <<
        "Title: " << lecture.title <<
        ", duration: " << lecture.duration <<
        ", author: " << lecture.author << endl;
}

void PrintCourse(const std::vector<Lecture>& lectures){ //теперь функция понятнее и принимает ровно то что мы хотели - лекцию в виде вектора
    for(const Lecture& lecture : lectures){ //код компактнее, понятнее, более поддерживаем
        PrintLecture(lecture);
    }
}
//теперь если мы захотим добавить новую характеристику, мы просто поправим нашу структуру
//а все функции останутся как есть



//как инициализировать переменные в нашей структуре?
//есть несколько способов
//к примеру просто поочередно заполняем по полям
Lecture lecture1;
lecture1.title = "OOP";
lecture1.duration = 5400;
lecture1.author = "Anton"

//но это занимает целых 4 строки и мы постоянно дублируем название переменной
//лучше так
Lecture lecture2 = {"OOP", 5400, "Anton"};
//перечисляем в том же порядке в котором объявлял внутри структуры



//еще можно использовать вложенные структуры
struct LectureTitle{
    string specialization;
    string course;
    string week;
};

struct DetailedLecture{
    LectureTitle title;
    int duration;
}; //менять местами кстати нельзя, тк область видимости переменных работает!

//теперь как создавать такие объекты с вложенными структурами
LectureTitle title = {"C++", "white belt", "OOP"};
DetailedLecture lecture1 = {title, 5400};
//либо
DetailedLecture lecture2 = {
    {"C++", "white belt", "OOP"}, 5400
};

//вывод будет
cout << lecture2.title.specialization << endl;

/*
struct позволяет определить новый тип
структуры состоят из нескольких именованных полей
структуры можно инициализировать в одну строчку с помощью {}
*/